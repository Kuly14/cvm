use revm::{
    interpreter::Host,
    primitives::{address, Bytes, CreateScheme, ExecutionResult, Output, TransactTo, TxEnv, U256},
    Evm, InMemoryDB,
};
use std::str::FromStr;

fn main() {
    let sender_code = Bytes::from_str("608060405234801561001057600080fd5b50610227806100206000396000f3fe60806040526004361061001e5760003560e01c8063e2f4f8bf14610023575b600080fd5b61003d60048036038101906100389190610109565b610053565b60405161004a919061016a565b60405180910390f35b60008175ffffffffffffffffffffffffffffffffffffffffffff16636d8ea0fa346040518263ffffffff1660e01b81526004016020604051808303818588803b15801561009f57600080fd5b505af11580156100b3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906100d89190610132565b9050919050565b6000813590506100ee816101c3565b92915050565b600081519050610103816101da565b92915050565b60006020828403121561011b57600080fd5b6000610129848285016100df565b91505092915050565b60006020828403121561014457600080fd5b6000610152848285016100f4565b91505092915050565b610164816101b9565b82525050565b600060208201905061017f600083018461015b565b92915050565b600061019082610197565b9050919050565b600075ffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6101cc81610185565b81146101d757600080fd5b50565b6101e3816101b9565b81146101ee57600080fd5b5056fea264697066735822122034bbce45fc71e61dff0dd6a7c6515db40d2b2db033d8c561b5d618a75994a38d64736f6c63430101000033").unwrap();
    let receiver_code = Bytes::from_str("608060405234801561001057600080fd5b5060ba8061001f6000396000f3fe608060405260043610601c5760003560e01c80636d8ea0fa146021575b600080fd5b6027603b565b604051603291906061565b60405180910390f35b60006064341415604c573490506051565b600190505b90565b605b81607a565b82525050565b6000602082019050607460008301846054565b92915050565b600081905091905056fea26469706673582212204b1be6cab98b7680f756e733f405f89844943952629a789d3dc820a07d5d807764736f6c63430101000033").unwrap();
    let mut evm = Evm::builder()
        .with_db(InMemoryDB::default())
        .modify_tx_env(|tx| {
            tx.caller = "0x1000000000000000000000000000000000000000"
                .parse()
                .unwrap();
            tx.value = U256::from(0);
            tx.data = sender_code.clone();
            tx.transact_to = TransactTo::Create(CreateScheme::Create)
        })
        .build();

    let s = evm.transact_commit().unwrap();

    let ExecutionResult::Success {
        output: Output::Create(_, Some(first_address)),
        ..
    } = s
    else {
        panic!()
    };

    let tx = TxEnv {
        caller: "0x1000000000000000000000000000000000000000"
            .parse()
            .unwrap(),
        data: receiver_code,
        transact_to: TransactTo::Create(CreateScheme::Create),
        ..Default::default()
    };
    evm.env_mut().tx = tx;
    let _ = evm.transact_commit().unwrap();
    evm.db_mut()
        .accounts
        .entry(address!("1000000000000000000000000000000000000000"))
        .and_modify(|x| x.info.balance = U256::MAX);

    let tx = TxEnv {
        caller: "0x1000000000000000000000000000000000000000"
            .parse()
            .unwrap(),
        data: Bytes::from_str(
            // ICAN ADDRESS, but the evm takes only the last 20 bytes
            "e2f4f8bf00000000000000000000cb66cd41c40f2acf72e7622b03588e446d37fd72b0dc",
        )
        .unwrap(),
        transact_to: TransactTo::Call(first_address),
        value: U256::from(100),
        ..Default::default()
    };

    evm.env_mut().tx = tx;
    let ExecutionResult::Success {
        output: Output::Call(res),
        ..
    } = evm.transact_commit().unwrap()
    else {
        panic!();
    };

    assert_eq!(U256::from_str(&res.to_string()).unwrap(), U256::from(100));
    println!("TEST PASSES");
}

// SOLIDITY SMART CONTRACTS
//
// // SPDX-License-Identifier: UNLICENSED
// pragma solidity ^1.1.0;
//
// contract Counter {
//     function run(address x) public payable returns(uint) {
//         return Second(x).show{value: msg.value}();
//     }
// }
//
// BYTECODE: 608060405234801561001057600080fd5b50610227806100206000396000f3fe60806040526004361061001e5760003560e01c8063e2f4f8bf14610023575b600080fd5b61003d60048036038101906100389190610109565b610053565b60405161004a919061016a565b60405180910390f35b60008175ffffffffffffffffffffffffffffffffffffffffffff16636d8ea0fa346040518263ffffffff1660e01b81526004016020604051808303818588803b15801561009f57600080fd5b505af11580156100b3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906100d89190610132565b9050919050565b6000813590506100ee816101c3565b92915050565b600081519050610103816101da565b92915050565b60006020828403121561011b57600080fd5b6000610129848285016100df565b91505092915050565b60006020828403121561014457600080fd5b6000610152848285016100f4565b91505092915050565b610164816101b9565b82525050565b600060208201905061017f600083018461015b565b92915050565b600061019082610197565b9050919050565b600075ffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6101cc81610185565b81146101d757600080fd5b50565b6101e3816101b9565b81146101ee57600080fd5b5056fea264697066735822122034bbce45fc71e61dff0dd6a7c6515db40d2b2db033d8c561b5d618a75994a38d64736f6c63430101000033
//
//
// contract Second {
//     function show() public payable returns(uint) {
//         if (msg.value == 100) {
//             return msg.value;
//         } else {
//             return 1;
//         }
//     }
// }
//
// BYTECODE: 608060405234801561001057600080fd5b5060ba8061001f6000396000f3fe608060405260043610601c5760003560e01c80636d8ea0fa146021575b600080fd5b6027603b565b604051603291906061565b60405180910390f35b60006064341415604c573490506051565b600190505b90565b605b81607a565b82525050565b6000602082019050607460008301846054565b92915050565b600081905091905056fea26469706673582212204b1be6cab98b7680f756e733f405f89844943952629a789d3dc820a07d5d807764736f6c63430101000033
//
//
